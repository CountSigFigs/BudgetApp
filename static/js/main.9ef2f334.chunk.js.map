{"version":3,"sources":["Components/BudgetIcon.js","Components/ExpenseIcon.js","Components/BalanceIcon.js","Components/DisplayIcons.js","Components/UserBudget.js","Components/UserExpenses.js","Components/DisplayUserInputArea.js","Components/title.js","Components/ExpenseTable.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["BudgetIcon","props","className","style","color","budget","ExpenseIcon","class","expenses","BalanceIcon","balance","DisplayIcons","UserBudget","state","undefined","handleChange","bind","event","this","setState","target","value","console","log","Form","FormGroup","Label","for","Input","type","name","id","placeholder","onChange","Button","backgroundColor","onClick","resetForm","Component","UserExpenses","expenseItem","handleExpenseItem","updateExpenses","DisplayUserInputArea","Title","ExpenseTable","expenseList","map","item","amount","Table","Main","expenseArray","updateBudget","handleDelete","isNaN","parseInt","alert","total","obj","newExpenseList","index","indexOf","splice","newBalance","newExpenses","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9ef2f334.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction BudgetIcon (props){\n    return (\n        <div className=\"col-7 col-md-3 mx-auto text-center mx-auto iconBox p-2 mb-2\" style={{color:'#228B22'}}>\n            <h3>Budget</h3>\n            <i className=\"fas fa-money-bill-alt fa-2x mr-1\"></i>\n            <span className=\"d-block icon text-center\">{props.budget}</span>\n        </div>\n    )\n}\n\nexport default BudgetIcon;","import React from 'react';\n\n\nfunction ExpenseIcon (props){\n    return (\n        <div className=\"col-7 col-md-3 mx-auto text-center mx-auto iconBox p-2 mb-2\" style={{color: '#DC143C'}}>\n            <h3 className='mr-2'>Expenses</h3>\n            <i class=\"fas fa-money-check fa-2x\"></i>\n\n            <span className='d-block text-center icon'>{props.expenses}</span>\n        </div>\n    )\n}\n\nexport default ExpenseIcon;\n\n","import React from 'react';\n\n\nfunction BalanceIcon (props){\n    return (\n        <div className=\"col-7 col-md-3 mx-auto text-center mx-auto iconBox p-2 mb-2\" style={{color:'#4169E1'}}>\n            <h3>Balance</h3>\n            <i className=\"fas fa-dollar-sign fa-2x mr-1\"></i>\n            <span className=\"d-block icon text-center\">{props.balance}</span>\n        </div>\n    )\n}\n\nexport default BalanceIcon;\n\n","import React from 'react';\nimport BudgetIcon from './BudgetIcon';\nimport ExpenseIcon from './ExpenseIcon';\nimport BalanceIcon from './BalanceIcon';\n\nfunction DisplayIcons (props){\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row mt-3 d-flex flex-row\">\n                <BudgetIcon budget={props.budget} balance={props.balance} expenses={props.expenses}/>\n                <ExpenseIcon expenses={props.expenses}/>\n                <BalanceIcon balance={props.balance}/>\n            </div>\n        </div>\n    )\n}\n\nexport default DisplayIcons;","import React, { Component } from 'react';\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\n\n\nclass UserBudget extends Component {\n    constructor (props){\n        super(props)\n        this.state={\n            budget: undefined,\n        }\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n    handleChange(event) {\n        this.setState({budget: event.target.value});\n      }\n\n    resetForm(){\n        this.setState({budget:''})\n        console.log(this.state.budget)\n    }\n\n    render() {\n        return (\n            <Form className=\"mt-3\" style={{color:'#228B22'}}>\n                <FormGroup>\n                    <Label for=\"userBudget\"><h4>Enter Budget</h4></Label>\n                    <Input\n                        type=\"text\"\n                        name=\"userBudget\"\n                        id=\"userBudget\"\n                        placeholder='4000'\n                        value={this.state.budget}\n                        onChange={this.handleChange}\n                    >\n                    </Input>\n                    <Button \n                        className=\"hoverOverGreen mt-3\"\n                        style={{backgroundColor:'#228B22'}}\n                        onClick={()=>{\n                            this.props.onClick(this.state.budget);\n                            this.resetForm()\n                            }}\n                    > \n                    Add Budget</Button>\n                </FormGroup>\n            </Form>\n        )\n    }\n}\nexport default UserBudget;\n\n","import React, { Component } from 'react';\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\n\nclass UserExpenses extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            expenses:'',\n            expenseItem:''\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleExpenseItem= this.handleExpenseItem.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState(\n            {expenses: event.target.value});\n      }\n\n    handleExpenseItem(event){\n        this.setState({\n            expenseItem: event.target.value\n        })\n    }\n    resetForm(){\n        this.setState({\n            expenses:'',\n            expenseItem:''\n        })\n        console.log(this.state)\n    }\n\n    render() {\n        return (\n            <Form className=\"mt-3\" style={{color: '#DC143C'}}>\n                <FormGroup>\n                    <Label for=\"userExpenseTitle\"><h4>Enter Expense Name</h4></Label>\n                    <Input\n                        type=\"text\"\n                        name=\"userExpenseTitle\"\n                        id=\"userExpenseTitle\"\n                        placeholder=\"Student loan\"\n                        onChange={this.handleExpenseItem}\n                        value={this.state.expenseItem}\n                    >\n                    </Input>\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"userExpenseAmount\"><h4>Enter Expense Amount</h4></Label>\n                    <Input\n                        type=\"text\"\n                        name=\"userExpenseAmount\"\n                        id=\"userExpenseAmount\"\n                        placeholder=\"200\"\n                        onChange={this.handleChange}\n                        value={this.state.expenses}\n                    >\n                    </Input>\n                    <Button \n                        style={{backgroundColor: '#DC143C'}}\n                        className='hoverOverRed mt-3' \n                        onClick={()=>{\n                            this.props.updateExpenses(this.state.expenseItem,this.state.expenses)\n                            this.resetForm()\n                                }\n                            }\n                        >Add Expense</Button>\n                </FormGroup>\n            </Form>\n        )\n    }\n}\nexport default UserExpenses;\n\n","import React from 'react';\nimport UserBudget from './UserBudget';\nimport UserExpenses from './UserExpenses';\n\n\nfunction DisplayUserInputArea (props){\n    return (\n        <div className=\"container\">\n            <div className=\"row mt-4\">\n                 <div className=\"col-10 mb-2 userInput ml-3 mx-auto iconBox\" >\n                    <UserBudget \n                        onClick={props.onClick}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-10 mt-2 userInput ml-3 mx-auto iconBox\">\n                     <UserExpenses\n                        updateExpenses={props.updateExpenses} \n                    />\n                </div>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default DisplayUserInputArea;\n\n","import React from 'react';\n\nfunction Title() {\n    return (\n                <div className='container'>\n                    <div className='row'>\n                        <div className='col text-center iconBox p-3' style={{color:'#4169E1'}}>\n                            <h1>Get Your Budget in Order</h1>\n                        </div>\n                    </div>\n                </div>\n                    \n    )\n}\n\nexport default Title;\n","import React from 'react'\nimport {Table} from 'reactstrap'\n\nfunction ExpenseTable (props){\n\n    \n    const expenseList= props.expenses.map(item =>{\n        return (\n            <tr>\n                    <td>{item.name}</td>\n                    <td>{item.amount}</td>\n                    <td><span onClick={()=>props.onClick(item)}><i class=\"fas fa-trash-alt clickMe\"></i></span></td>\n            </tr>\n        )\n    })\n\n   \n    return(\n        <div className='container'>\n            <div className='row'>\n                <div className='col mt-3 text-center iconBox p-3' style={{color:'#4169E1'}}>\n                    <h3>Your Expenses</h3>\n                    <Table style={{color:'#4169E1'}}>\n                        <thead>\n                            <tr>\n                                <th>Expense Name</th>\n                                <th>Expense Amount</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {expenseList}\n                        </tbody>\n                    </Table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ExpenseTable;\n","import React, {Component} from 'react';\nimport DisplayIcons from './DisplayIcons';\nimport DisplayUserInputArea from './DisplayUserInputArea';\nimport Title from './title';\nimport ExpenseTable from './ExpenseTable';\n\nclass Main extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            budget: 0,\n            expenses: 0,\n            expenseArray:[],\n            balance: 0\n        }\n\n        this.updateBudget=this.updateBudget.bind(this)\n        this.updateExpenses=this.updateExpenses.bind(this)\n        this.handleDelete=this.handleDelete.bind(this)\n\n    }\n    //updates the budget amount and checks for user errors\n   updateBudget(amount){\n\n    if (isNaN(amount) || (!amount)){\n        alert('Input only numbers!')\n        return;\n    } else {\n        let balance= parseInt(amount) - parseInt(this.state.expenses)\n        this.setState({\n            budget: amount,\n            balance: balance\n        })\n        }\n   }\n\n   //updates expense amount checks for user errors\n   updateExpenses(item,amount){\n    if (!item || isNaN(amount) || !amount){\n        alert('Input a valid name and expense amount. Example: Student loan 250')\n    } else {\n    let total= parseInt(this.state.expenses) + parseInt(amount);\n    let balance= parseInt(this.state.budget) - total\n    \n    //creates new object to be added to expense array\n    let obj={\n        name:item,\n        amount: amount\n    }\n    \n    this.setState({\n        expenses: total,\n        balance: balance,\n        expenseArray: [...this.state.expenseArray,obj]\n    })\n    \n    }\n}\n    //handles the delete function from expense array\n    handleDelete(item){\n        let newExpenseList= this.state.expenseArray;\n        let index = newExpenseList.indexOf(item);\n        newExpenseList.splice(index,1);\n\n        //updates expense and balance amounts\n        let newBalance= this.state.balance;\n        let newExpenses=this.state.expenses;\n        newBalance= parseInt(newBalance) + parseInt(item.amount);\n        newExpenses= newExpenses-item.amount;\n\n        this.setState({\n            expenseArray: newExpenseList,\n            balance: newBalance,\n            expenses: newExpenses\n        })\n    }\n    render (){\n        return (\n            <div className='container-fluid'>\n                <div className='row'>\n                    <div className='col-12 col-md-5 mx-auto mt-5'>\n                        <Title />\n                        <DisplayUserInputArea\n                        onClick={this.updateBudget}\n                        updateExpenses={this.updateExpenses}\n                        />\n                    </div>\n                    <div className='col mt-3'>\n                        <DisplayIcons \n                            budget={this.state.budget} \n                            expenses={this.state.expenses}  \n                            balance={this.state.balance}  \n                        />\n                        <ExpenseTable expenses={this.state.expenseArray} onClick={this.handleDelete}/>\n                    </div>\n                </div>\n                \n                \n            </div>\n        )\n    }\n}\n\nexport default Main;\n\n","import React from 'react';\nimport Main from './Components/Main'\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  style={{backgroundColor: '#e9ebee'}}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}